name: Regression Testing CI

on:
  push:
    branches:
      - main
  workflow_dispatch: {}

permissions:
  contents: read
  actions: read
  checks: write

env:
  SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/automation_testing?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
  SPRING_DATASOURCE_USERNAME: root
  SPRING_DATASOURCE_PASSWORD: root@123

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: root@123
          MYSQL_DATABASE: automation_testing
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # 🧩 Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # ☕ Step 2: Set up Java 21 with Maven cache
      - name: Set up JDK 21 and Maven cache
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      # 🌐 Step 3: Install Chrome + Chromedriver for headless Selenium
      - name: Install Chrome & Chromedriver
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg2
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          sudo apt-get install -y chromium-chromedriver
          echo "✅ Chrome Installed:"
          google-chrome --version || chromium-browser --version

      # 🕒 Step 4: Wait until MySQL is ready
      - name: Wait for MySQL to be ready
        run: |
          sudo apt-get install -y mysql-client
          for i in {1..30}; do
            if mysql -h 127.0.0.1 -P 3306 -u root -proot@123 -e "SELECT 1;" &>/dev/null; then
              echo "✅ MySQL is ready"
              break
            fi
            echo "⏳ Waiting for MySQL..."
            sleep 3
          done

      # 🧹 Step 5: Clean old reports
      - name: Clean old reports
        run: |
          rm -rf regression-test-suite/test-output/reports/*
          rm -rf regression-test-suite/artifacts/*
          mkdir -p regression-test-suite/test-output/reports
          mkdir -p regression-test-suite/artifacts

      # 🔧 Step 6: Make Maven wrapper executable
      - name: Make Maven wrapper executable
        working-directory: regression-test-suite
        run: chmod +x ./mvnw

      # 🧠 Step 7: Run Regression Test Suite (no XML dependency)
      - name: Run Regression Tests (CombinedSuiteRunner)
        working-directory: regression-test-suite
        env:
          HEADLESS: true
        run: |
          echo "🚀 Running CombinedSuiteRunner (no XML)..."
          ./mvnw clean test \
            -Dtest=tests.combined.CombinedSuiteRunner \
            -Dsurefire.suiteXmlFiles= \
            -Dmaven.test.failure.ignore=true \
            -Dwebdriver.chrome.driver=/usr/bin/chromedriver \
            -Dselenium.headless=true \
            -Dsurefire.printSummary=true
        continue-on-error: true

      # 📄 Step 8: Debug - list all reports and artifacts
      - name: List generated reports and artifacts
        if: always()
        run: |
          echo "=== 📊 Reports ==="
          ls -R regression-test-suite/test-output/reports || echo "No reports found"
          echo "=== 📸 Artifacts ==="
          ls -R regression-test-suite/artifacts || echo "No artifacts found"

      # 📦 Step 9: Upload HTML & CSV reports
      - name: Upload HTML & CSV test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: regression-test-reports-${{ github.run_number }}
          path: |
            regression-test-suite/test-output/reports/**/*.html
            regression-test-suite/test-output/reports/**/*.csv
            regression-test-suite/test-output/reports/**/*.xml
          retention-days: 30
          if-no-files-found: warn

      # 🖼️ Step 10: Upload screenshots & logs
      - name: Upload screenshots & other artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: regression-test-artifacts-${{ github.run_number }}
          path: regression-test-suite/artifacts/**/*
          retention-days: 30
          if-no-files-found: warn
